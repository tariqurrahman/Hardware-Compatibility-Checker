
  <Code><![CDATA[# system information 
$RAM = (gwmi Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | % { [Math]::Round(($_.sum / 1GB), 2) })
$disksize = (gwmi -Class Win32_Diskdrive -Filter { DeviceId = '\\\\.\\PHYSICALDRIVE0' } | Measure-Object -Property size -Sum | % { [Math]::Round(($_.sum / 1GB), 2) })
$windows_edition = (gwmi -class Win32_OperatingSystem).Caption
$windows_architecture = (gwmi Win32_OperatingSystem).OSArchitecture # get OS Architectures : Either 32-bit or 64-bit
$hResolution = (Get-CimInstance -ClassName CIM_VideoController).CurrentHorizontalResolution # horizontal resolution
$vResolution = (Get-CimInstance -ClassName CIM_VideoController).CurrentVerticalResolution # vertical resolution
$office = reg query "HKEY_CLASSES_ROOT\Word.Application\CurVer"
$adminRights = whoami /all
$processor = Get-WmiObject win32_Processor | Select-Object -Property Name
$wifi = netsh wlan show drivers | Select-Object -index 10 # get radio types supported

# STEP:1 => Checking whether the windows is Windows 10(Education, Pro or Enterprise) with 64-bit architecture  
function windowsCheck
{
	# verifying the version and architecture of the windows
	if (($windows_edition -eq "Microsoft Windows 10 Education"` -and ` $windows_architecture -eq "64-bit")` -or ` ($windows_edition -eq "Microsoft Windows 10 Enterprise"` -and ` $windows_architecture -eq "64-bit")` -or ` ($windows_edition -eq "Microsoft Windows 10 Pro"` -and ` $windows_architecture -eq "64-bit"))
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Operating System Information" + "`n" + "`n" +
		"Edition: " + $windows_edition + "`n" +
		"Architecture: " + $windows_architecture
		$correct1.Show()
		$cross1.Hide()
		$empty1.Hide()
	}
	else
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Operating system check failed!"
		$cross1.Show()
		$correct1.Hide()
		$empty1.Hide()
	}
}

# STEP:2 => Checking RAM (Should be at least 8 GB)  
function ramCheck
{
	#if RAM<8GB
	if ($RAM -lt 8)
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"RAM" + "`n" + "`n" +
		"Size: " + $RAM + " GB" + "`n" +
		"Memory check failed. Must have at least 8 GB RAM."
		$cross2.Show()
		$correct2.Hide()
		$empty2.Hide()
	}
	else
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"RAM Information" + "`n" + "`n" +
		"Size: " + $RAM + " GB" + "`n" +
		"Memory check passed!"
		$correct2.Show()
		$cross2.Hide()
		$empty2.Hide()
	}
	
}

# STEP:3 => Checking Display Resolution
function resolutionCheck
{
	if ($hResolution -lt "1920"` -and ` $vResolution -lt "1080")
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Display resolution information" + "`n" + "`n" +
		"Display resolution: " + $hResolution + " x " + $vResolution + "`n" +
		"Display resolution check failed. Must be at least 1920x1080 (1080p)"
		$cross3.Show()
		$correct3.Hide()
		$empty3.Hide()
	}
	else
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Display resolution information" + "`n" + "`n" +
		"Display Resolution: " + $hResolution + " x " + $vResolution + "`n" +
		"Display resolution check passed!"
		$correct3.Show()
		$cross3.Hide()
		$empty3.Hide()
	}
}

# STEP:4 => Checking Storage Drive (Should be at least 200 GB)  
function driveCheck
{
	if ($disksize -lt "200")
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Disk Information" + "`n" + "`n" +
		"Size: " + $disksize + " GB" + "`n" +
		"Disk size check failed. Must have at least 200 GB storage."
		$cross4.Show()
		$correct4.Hide()
		$empty4.Hide()
	}
	else
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Disk Information" + "`n" + "`n" +
		"Size: " + $disksize + " GB" + "`n" +
		"Disk size check passed!"
		$correct4.Show()
		$cross4.Hide()
		$empty4.Hide()
	}
}

# STEP:5 => Checking Wi-Fi (Should be at least dual-band Wi-Fi)  
function wifi
{
	if (($wifi.contains("802.11ax"))` -or ` ($wifi.contains("802.11ac"))` -or ` ($wifi.contains("802.11n")))
	{
		$showInfo.Hide()
		$showInfo.Text =
		"Wi-Fi compatibility check passed!"
		$cross5.Hide()
		$correct5.Show()
		$empty5.Hide()
	}
	else
	{
		$showInfo.Hide()
		$showInfo.Text =
		"Wi-Fi compatibility check failed. Must have dual-band Wi-Fi (802.11ax, 802.11ac, or 802.11n)"
		$cross5.Show()
		$correct5.Hide()
		$empty5.Hide()
	}
}

# STEP:6 => Checking Office 2016 and 365
function officeCheck
{
	#if ($office.displayname -like "*Microsoft Office 365*" -or $office.displayname -like "*Microsoft office 2016*")
	if ($office -like "*Word.Application.16")
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Microsoft office check passed!"
		$cross6.Hide()
		$correct6.Show()
		$empty6.Hide()
	}
	elseif ($office = "ERROR: The system was unable to find the specified registry key or value.")
	{
		# displaying text information 
		$showInfo.Hide()
		$showInfo.Text =
		"Microsoft Office check failed. Office not detected."
		$cross6.Show()
		$correct6.Hide()
		$empty6.Hide()
	}
	else
	{
		$showInfo.Hide()
		$showInfo.Text =
		"Office Version: " +
		"Microsoft Office check failed. Must have Office 2016, 2019, or 365."
		$cross6.Show()
		$correct6.Hide()
		$empty6.Hide()
	}
}
function processor
{
	if (($processor -like "*i[579]-[6789'10']*")` -or ` ($processor -like "*ee"))
	{
		$showInfo.Hide()
		$showInfo.Text = "CPU check passed!"
		$cross7.Hide()
		$correct7.Show()
		$empty7.Hide()
	}
	else
	{
		$showInfo.Hide()
		$showInfo.Text =
		"CPU check failed. Must have at least sixth-generation Intel Core i5 processor or better."
		$cross7.Show()
		$correct7.Hide()
		$empty7.Hide()
	}
}
function adminrights
{
	foreach ($line in $adminRights)
	{
		if ($line -like "*BUILTIN\Administrators*")
		{
			$showInfo.Hide()
			$showInfo.Text =
			"Administrator check passed! User has admin rights on this computer."
			$cross8.Hide()
			$correct8.Show()
			$empty8.Hide()
		}
		else
		{
			$showInfo.Hide()
			$showInfo.Text =
			"Administrator check failed. User has no admin rights on this computer."
			$cross8.Show()
			$correct8.Hide()
			$empty8.Hide()
		}
	}
}
$formWSUHardwareCompatibi_Load = {
	#TODO: Initialize Form Controls here
	$showInfo.Hide()
	$labelWindowsWindows10x64E.Hide()
	$labelRAM.Hide()
	$labelDisplayResolution.Hide()
	$labelStorageDrive.Hide()
	$labelDualBandWiFiConnecti.Hide()
	$labelMicrosoftOffice.Hide()
	$labelProcessor.Hide()
	$labelAdminstrativeRights.Hide()
}

$buttonCheckCompatibility_Click = {
	#TODO: Place custom script here
	
	windowsCheck
	ramCheck
	resolutionCheck
	driveCheck
	wifi
	officeCheck
	processor
	adminrights
	
	$labelWindowsWindows10x64E.Show()
	$labelOperatingSystem.Hide()
	
	$labelRAM.Show()
	$ramlabel1.Hide()
	
	$labelDisplayResolution.Show()
	$displayres.Hide()
	
	$labelStorageDrive.Show()
	$StorageDrive1.Hide()
	
	$labelDualBandWiFiConnecti.Show()
	$wifi1.Hide()
	
	$labelMicrosoftOffice.Show()
	$MicrosoftOfficelabel1.Hide()
	
	$labelProcessor.Show()
	$Processorlabel1.Hide()
	
	$labelAdminstrativeRights.Show()
	$AdminstrativeRightslabel1.Hide()
	
	
	
}

$picturebox1_Click={
	#TODO: Place custom script here
	
}

$labelWindowsWindows10x64E_Click={
	#TODO: Place custom script here
	windowsCheck
	$showInfo.Show()
}

$picturebox3_Click={
	#TODO: Place custom script here
	
}

$picturebox0_Click={
	#TODO: Place custom script here
	
}

$showInfo_Click={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}
#endregion

$picturebox4_Click={
	#TODO: Place custom script here
	
}

$labelRAM_Click={
	#TODO: Place custom script here
	ramCheck
	$showInfo.Show()
}

$Resolution_Click={
	#TODO: Place custom script here
}

$labelMicrosoftOffice_Click={
	#TODO: Place custom script here
	officeCheck
	$showInfo.Show()
}

$empty3_Click={
	#TODO: Place custom script here
	
}

$labelDualBandWiFiConnecti_Click={
	#TODO: Place custom script here
	wifi
	$showInfo.Show()
}

$labelStorageDrive_Click={
	#TODO: Place custom script here
	driveCheck
	$showInfo.Show()
}

$labelProcessor_Click={
	#TODO: Place custom script here
	processor
	$showInfo.Show()
}

$labelAdminstrativeRights_Click={
	#TODO: Place custom script here
	adminrights
	$showInfo.Show()
}

$labelDisplayResolution_Click={
	#TODO: Place custom script here
	resolutionCheck
	$showInfo.Show()
}

$labelWinonaStateUniversit_Click={
	#TODO: Place custom script here
	
}

$cross1_Click={
	#TODO: Place custom script here
	
}

$empty4_Click={
	#TODO: Place custom script here
	
}

$labelHardwareCompatibilit_Click={
	#TODO: Place custom script here
	
}

$label1_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>
